{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport * as THREE from 'three';\n\n/// <reference path=\"node_modules/@types/three/src/Three.d.ts\" />\n/// <reference path=\"node_modules/@types/three/src/constants.d.ts\" />\n/// <reference path=\"node_modules/@types/three/src/Three.Legacy.d.ts\" />\n/// <reference path=\"node_modules/@types/three/src/utils.d.ts\" />\nexport default {\n  name: \"Tr2\",\n  data() {\n    return {\n      scene: new THREE.Scene(),\n      //创建场景\n      camera: new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000),\n      //创建相机\n      renderer: new THREE.WebGLRenderer() //创建渲染器\n    };\n  },\n\n  methods: {\n    createBox() {\n      const gl = new THREE.BoxGeometry(1, 1, 1); // 定义几何体类型\n      const ml = new THREE.LineBasicMaterial({\n        color: 0x0000ff\n      }); //定义线条材质\n\n      // 给出立方体\n      this.cube = new THREE.Mesh(gl, ml);\n      this.scene.add(this.cube);\n    },\n    createLine() {\n      const points = [];\n      points.push(new THREE.Vector3(0, 0, 0));\n      points.push(new THREE.Vector3(0, 2, 0));\n      points.push(new THREE.Vector3(1, 2, 0));\n      const gl = new THREE.BufferGeometry().setFromPoints(points); // 定义几何体类型\n      const ml = new THREE.LineBasicMaterial({\n        color: 0x0000ff\n      }); //定义线条材质\n\n      // 给出线条\n      this.line = new THREE.Line(gl, ml);\n      this.scene.add(this.line);\n    },\n    animate() {\n      requestAnimationFrame(this.animate);\n      // this.controls.update(); // 启动阻尼时\n\n      // 渲染器对场景和摄像头进行渲染\n      this.renderer.render(this.scene, this.camera);\n    }\n  },\n  mounted() {\n    // this.renderer.setSize(window.innerWidth,window.innerHeight);\n    this.renderer.setSize(100, 100);\n    this.camera.position.set(0, 0, 1);\n    this.$refs.threecontent.appendChild(this.renderer.domElement);\n    this.createBox();\n    // 实现循环动画\n    this.animate();\n  }\n};","map":{"version":3,"names":["THREE","name","data","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","renderer","WebGLRenderer","methods","createBox","gl","BoxGeometry","ml","LineBasicMaterial","color","cube","Mesh","add","createLine","points","push","Vector3","BufferGeometry","setFromPoints","line","Line","animate","requestAnimationFrame","render","mounted","setSize","position","set","$refs","threecontent","appendChild","domElement"],"sources":["src/components/3d/Tr2.vue"],"sourcesContent":["<template>\r\n    <div ref=\"threecontent\">\r\n    </div>\r\n</template>\r\n<script>\r\nimport * as THREE from 'three'\r\n\r\n/// <reference path=\"node_modules/@types/three/src/Three.d.ts\" />\r\n/// <reference path=\"node_modules/@types/three/src/constants.d.ts\" />\r\n/// <reference path=\"node_modules/@types/three/src/Three.Legacy.d.ts\" />\r\n/// <reference path=\"node_modules/@types/three/src/utils.d.ts\" />\r\nexport default {\r\n    name:\"Tr2\",\r\n    data(){\r\n        return {\r\n            scene:new THREE.Scene(), //创建场景\r\n            camera:new THREE.PerspectiveCamera(75,window.innerWidth / window.innerHeight,0.1,1000), //创建相机\r\n            renderer:new THREE.WebGLRenderer(), //创建渲染器\r\n        }\r\n    },\r\n    methods: {\r\n        createBox(){\r\n            const gl = new THREE.BoxGeometry( 1, 1, 1 ); // 定义几何体类型\r\n            const ml = new THREE.LineBasicMaterial({color:0x0000ff}); //定义线条材质\r\n\r\n            // 给出立方体\r\n            this.cube = new THREE.Mesh(gl,ml);\r\n            this.scene.add(this.cube);\r\n        },\r\n        createLine(){\r\n            const points = [];\r\n            points.push(new THREE.Vector3(0,0,0));\r\n            points.push(new THREE.Vector3(0,2,0));\r\n            points.push(new THREE.Vector3(1,2,0));\r\n            const gl = new THREE.BufferGeometry().setFromPoints(points); // 定义几何体类型\r\n            const ml = new THREE.LineBasicMaterial({color:0x0000ff}); //定义线条材质\r\n\r\n            // 给出线条\r\n            this.line = new THREE.Line(gl,ml);\r\n            this.scene.add(this.line);\r\n        },\r\n        \r\n\r\n\r\n        animate(){\r\n            requestAnimationFrame(this.animate);\r\n            // this.controls.update(); // 启动阻尼时\r\n\r\n            // 渲染器对场景和摄像头进行渲染\r\n            this.renderer.render(this.scene,this.camera);\r\n        },\r\n    },\r\n    mounted() {\r\n        // this.renderer.setSize(window.innerWidth,window.innerHeight);\r\n        this.renderer.setSize(100,100)\r\n        this.camera.position.set( 0, 0, 1 );\r\n        this.$refs.threecontent.appendChild(this.renderer.domElement);\r\n\r\n        this.createBox();\r\n        // 实现循环动画\r\n        this.animate();\r\n    },\r\n}\r\n</script>\r\n<style lang=\"css\">\r\n    \r\n</style>"],"mappings":";AAKA,YAAAA,KAAA;;AAEA;AACA;AACA;AACA;AACA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,KAAA,MAAAH,KAAA,CAAAI,KAAA;MAAA;MACAC,MAAA,MAAAL,KAAA,CAAAM,iBAAA,KAAAC,MAAA,CAAAC,UAAA,GAAAD,MAAA,CAAAE,WAAA;MAAA;MACAC,QAAA,MAAAV,KAAA,CAAAW,aAAA;IACA;EACA;;EACAC,OAAA;IACAC,UAAA;MACA,MAAAC,EAAA,OAAAd,KAAA,CAAAe,WAAA;MACA,MAAAC,EAAA,OAAAhB,KAAA,CAAAiB,iBAAA;QAAAC,KAAA;MAAA;;MAEA;MACA,KAAAC,IAAA,OAAAnB,KAAA,CAAAoB,IAAA,CAAAN,EAAA,EAAAE,EAAA;MACA,KAAAb,KAAA,CAAAkB,GAAA,MAAAF,IAAA;IACA;IACAG,WAAA;MACA,MAAAC,MAAA;MACAA,MAAA,CAAAC,IAAA,KAAAxB,KAAA,CAAAyB,OAAA;MACAF,MAAA,CAAAC,IAAA,KAAAxB,KAAA,CAAAyB,OAAA;MACAF,MAAA,CAAAC,IAAA,KAAAxB,KAAA,CAAAyB,OAAA;MACA,MAAAX,EAAA,OAAAd,KAAA,CAAA0B,cAAA,GAAAC,aAAA,CAAAJ,MAAA;MACA,MAAAP,EAAA,OAAAhB,KAAA,CAAAiB,iBAAA;QAAAC,KAAA;MAAA;;MAEA;MACA,KAAAU,IAAA,OAAA5B,KAAA,CAAA6B,IAAA,CAAAf,EAAA,EAAAE,EAAA;MACA,KAAAb,KAAA,CAAAkB,GAAA,MAAAO,IAAA;IACA;IAIAE,QAAA;MACAC,qBAAA,MAAAD,OAAA;MACA;;MAEA;MACA,KAAApB,QAAA,CAAAsB,MAAA,MAAA7B,KAAA,OAAAE,MAAA;IACA;EACA;EACA4B,QAAA;IACA;IACA,KAAAvB,QAAA,CAAAwB,OAAA;IACA,KAAA7B,MAAA,CAAA8B,QAAA,CAAAC,GAAA;IACA,KAAAC,KAAA,CAAAC,YAAA,CAAAC,WAAA,MAAA7B,QAAA,CAAA8B,UAAA;IAEA,KAAA3B,SAAA;IACA;IACA,KAAAiB,OAAA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}