{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport * as THREE from 'three';\nexport default {\n  name: \"Tr1\",\n  data() {\n    return {\n      scene: new THREE.Scene(),\n      //创建场景\n      camera: new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000),\n      //创建相机\n      renderer: new THREE.WebGLRenderer(),\n      //创建渲染器\n      geometry: new THREE.BoxGeometry(1, 1, 1),\n      //创建几何体\n      material: new THREE.MeshBasicMaterial({\n        color: 0x00ff00\n      }) //定义材质\n    };\n  },\n\n  methods: {\n    createBox() {\n      this.cube = new THREE.Mesh(this.geometry, this.material);\n      this.scene.add(this.cube);\n      this.camera.position.z = 5;\n    },\n    createLine() {\n      const points = [];\n      points.push(new THREE.Vector3(-10, 0, 0));\n      points.push(new THREE.Vector3(0, 10, 0));\n      points.push(new THREE.Vector3(10, 0, 0));\n      const gl = new THREE.BufferGeometry().setFromPoints(points); // 定义几何体\n      const ml = new THREE.LineBasicMaterial({\n        color: 0x0000ff\n      }); //定义线条材质\n\n      const line = new THREE.Line(gl, ml);\n      this.scene.add(line);\n      this.renderer.render(scene, camera);\n    },\n    animate() {\n      requestAnimationFrame(this.animate);\n      this.cube.rotation.x += 0.01;\n      this.cube.rotation.y += 0.01;\n      this.renderer.render(this.scene, this.camera);\n    }\n  },\n  mounted() {\n    this.renderer.setSize(window.innerWidth, window.innerHeight);\n    document.body.appendChild(this.renderer.domElement);\n    // 创建一个cube\n    this.createBox();\n    this.createLine();\n    // 实现循环动画\n    this.animate();\n  }\n};","map":{"version":3,"names":["THREE","name","data","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","renderer","WebGLRenderer","geometry","BoxGeometry","material","MeshBasicMaterial","color","methods","createBox","cube","Mesh","add","position","z","createLine","points","push","Vector3","gl","BufferGeometry","setFromPoints","ml","LineBasicMaterial","line","Line","render","animate","requestAnimationFrame","rotation","x","y","mounted","setSize","document","body","appendChild","domElement"],"sources":["src/components/3d/Tr1.vue"],"sourcesContent":["<template>\r\n    <div>\r\n\r\n    </div>\r\n</template>\r\n<script>\r\nimport * as THREE from 'three'\r\nexport default {\r\n    name:\"Tr1\",\r\n    data(){\r\n        return {\r\n            scene:new THREE.Scene(), //创建场景\r\n            camera:new THREE.PerspectiveCamera(75,window.innerWidth / window.innerHeight,0.1,1000), //创建相机\r\n            renderer:new THREE.WebGLRenderer(), //创建渲染器\r\n            geometry:new THREE.BoxGeometry(1,1,1), //创建几何体\r\n            material:new THREE.MeshBasicMaterial({color:0x00ff00}),//定义材质\r\n        }\r\n    },\r\n    methods: {\r\n        createBox(){\r\n            this.cube = new THREE.Mesh(this.geometry,this.material);\r\n            this.scene.add(this.cube);\r\n            this.camera.position.z = 5;\r\n        },\r\n        createLine(){\r\n            const points = [];\r\n            points.push(new THREE.Vector3(-10,0,0));\r\n            points.push(new THREE.Vector3(0,10,0));\r\n            points.push(new THREE.Vector3(10,0,0));\r\n\r\n            const gl = new THREE.BufferGeometry().setFromPoints(points); // 定义几何体\r\n            const ml = new THREE.LineBasicMaterial({color:0x0000ff}); //定义线条材质\r\n\r\n            const line = new THREE.Line(gl,ml);\r\n\r\n            this.scene.add(line);\r\n            this.renderer.render(scene,camera);\r\n        },\r\n        animate(){\r\n            requestAnimationFrame(this.animate);\r\n            this.cube.rotation.x += 0.01;\r\n            this.cube.rotation.y += 0.01;\r\n            this.renderer.render(this.scene,this.camera);\r\n        },\r\n    },\r\n    mounted() {\r\n        this.renderer.setSize(window.innerWidth,window.innerHeight);\r\n        document.body.appendChild(this.renderer.domElement);\r\n        // 创建一个cube\r\n        this.createBox();\r\n        this.createLine();\r\n        // 实现循环动画\r\n        this.animate();\r\n    },\r\n}\r\n</script>\r\n<style lang=\"css\">\r\n    \r\n</style>"],"mappings":";AAMA,YAAAA,KAAA;AACA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,KAAA,MAAAH,KAAA,CAAAI,KAAA;MAAA;MACAC,MAAA,MAAAL,KAAA,CAAAM,iBAAA,KAAAC,MAAA,CAAAC,UAAA,GAAAD,MAAA,CAAAE,WAAA;MAAA;MACAC,QAAA,MAAAV,KAAA,CAAAW,aAAA;MAAA;MACAC,QAAA,MAAAZ,KAAA,CAAAa,WAAA;MAAA;MACAC,QAAA,MAAAd,KAAA,CAAAe,iBAAA;QAAAC,KAAA;MAAA;IACA;EACA;;EACAC,OAAA;IACAC,UAAA;MACA,KAAAC,IAAA,OAAAnB,KAAA,CAAAoB,IAAA,MAAAR,QAAA,OAAAE,QAAA;MACA,KAAAX,KAAA,CAAAkB,GAAA,MAAAF,IAAA;MACA,KAAAd,MAAA,CAAAiB,QAAA,CAAAC,CAAA;IACA;IACAC,WAAA;MACA,MAAAC,MAAA;MACAA,MAAA,CAAAC,IAAA,KAAA1B,KAAA,CAAA2B,OAAA;MACAF,MAAA,CAAAC,IAAA,KAAA1B,KAAA,CAAA2B,OAAA;MACAF,MAAA,CAAAC,IAAA,KAAA1B,KAAA,CAAA2B,OAAA;MAEA,MAAAC,EAAA,OAAA5B,KAAA,CAAA6B,cAAA,GAAAC,aAAA,CAAAL,MAAA;MACA,MAAAM,EAAA,OAAA/B,KAAA,CAAAgC,iBAAA;QAAAhB,KAAA;MAAA;;MAEA,MAAAiB,IAAA,OAAAjC,KAAA,CAAAkC,IAAA,CAAAN,EAAA,EAAAG,EAAA;MAEA,KAAA5B,KAAA,CAAAkB,GAAA,CAAAY,IAAA;MACA,KAAAvB,QAAA,CAAAyB,MAAA,CAAAhC,KAAA,EAAAE,MAAA;IACA;IACA+B,QAAA;MACAC,qBAAA,MAAAD,OAAA;MACA,KAAAjB,IAAA,CAAAmB,QAAA,CAAAC,CAAA;MACA,KAAApB,IAAA,CAAAmB,QAAA,CAAAE,CAAA;MACA,KAAA9B,QAAA,CAAAyB,MAAA,MAAAhC,KAAA,OAAAE,MAAA;IACA;EACA;EACAoC,QAAA;IACA,KAAA/B,QAAA,CAAAgC,OAAA,CAAAnC,MAAA,CAAAC,UAAA,EAAAD,MAAA,CAAAE,WAAA;IACAkC,QAAA,CAAAC,IAAA,CAAAC,WAAA,MAAAnC,QAAA,CAAAoC,UAAA;IACA;IACA,KAAA5B,SAAA;IACA,KAAAM,UAAA;IACA;IACA,KAAAY,OAAA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}