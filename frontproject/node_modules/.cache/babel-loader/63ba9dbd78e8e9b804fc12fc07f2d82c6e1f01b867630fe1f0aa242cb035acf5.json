{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport * as THREE from 'three';\nimport { TextGeometry } from 'three/addons/geometries/TextGeometry.js';\nimport { FontLoader } from 'three/addons/loaders/FontLoader.js';\n/// <reference path=\"node_modules/@types/three/src/Three.d.ts\" />\n/// <reference path=\"node_modules/@types/three/src/constants.d.ts\" />\n/// <reference path=\"node_modules/@types/three/src/Three.Legacy.d.ts\" />\n/// <reference path=\"node_modules/@types/three/src/utils.d.ts\" />\nexport default {\n  name: \"Tr2\",\n  data() {\n    return {\n      scene: new THREE.Scene(),\n      //创建场景\n      camera: new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000),\n      //创建相机\n      renderer: new THREE.WebGLRenderer({\n        alpha: true\n      }) //创建渲染器\n    };\n  },\n\n  methods: {\n    createBox(fontcontent) {\n      const gl = new THREE.BoxGeometry(1.3, 0.1, 0.8); // 定义几何体类型\n\n      const ml = new THREE.LineBasicMaterial({\n        transparent: true,\n        opacity: 0.8,\n        color: \"#2C425E\"\n      }); //定义线条材质\n\n      // 给出立方体\n      const cube = new THREE.Mesh(gl, ml);\n\n      // 添加边框\n      const edges = new THREE.EdgesGeometry(gl);\n      const ll = new THREE.LineBasicMaterial({\n        color: '#36ABA7',\n        linewidth: 10\n      }); // black color for the edges\n      const ls = new THREE.LineSegments(edges, ll);\n      this.cube_p = new THREE.Object3D();\n      this.cube_p.add(cube);\n      this.cube_p.add(ls);\n\n      // 添加字体\n      const loader = new FontLoader();\n      loader.load('http://127.0.0.1:8000/media/fonts/helvetiker_bold.typeface.json', font => {\n        const tx = new TextGeometry(`${fontcontent}`, {\n          font: font,\n          size: 0.2,\n          height: 0.03\n        });\n        let tm = new THREE.MeshBasicMaterial({\n          color: \"#C0C1C3\"\n        });\n        const txm = new THREE.Mesh(tx, tm);\n        txm.position.set(this.x, 0.15, 0.08);\n        txm.rotation.x = 80;\n        this.cube_p.add(txm);\n      });\n      this.scene.add(this.cube_p);\n    },\n    createLine() {\n      const points = [];\n      points.push(new THREE.Vector3(0, 0, 0));\n      points.push(new THREE.Vector3(0, 2, 0));\n      points.push(new THREE.Vector3(1, 2, 0));\n      const gl = new THREE.BufferGeometry().setFromPoints(points); // 定义几何体类型\n      const ml = new THREE.LineBasicMaterial({\n        color: 0x0000ff\n      }); //定义线条材质\n\n      // 给出线条\n      this.line = new THREE.Line(gl, ml);\n      this.scene.add(this.line);\n    },\n    creatFont() {},\n    animate() {\n      requestAnimationFrame(this.animate);\n      // this.controls.update(); // 启动阻尼时\n      // 设置动画\n      if (this.cube_p.rotation.x <= 0.2 && this.isl == 1) {\n        this.cube_p.rotation.x += 0.001;\n      } else if (this.isl != 2) {\n        this.isl = 2;\n      }\n      if (this.cube_p.rotation.x > -0.2 && this.isl == 2) {\n        this.cube_p.rotation.x -= 0.001;\n      } else if (this.isl != 1) {\n        this.isl = 1;\n      }\n\n      // 渲染器对场景和摄像头进行渲染\n      this.renderer.render(this.scene, this.camera);\n    }\n  },\n  props: [\"fontconstent\", \"x\"],\n  mounted() {\n    // this.renderer.setSize(window.innerWidth,window.innerHeight);\n    this.renderer.setSize(400, 200);\n    this.camera.position.set(0, 1, 0);\n    this.camera.lookAt(0, 0, 0);\n    this.$refs.threecontent.appendChild(this.renderer.domElement);\n    this.createBox(this.fontconstent);\n    this.isl = 1;\n    this.cube_p.rotation.x = 0;\n    this.cube_p.rotation.y = 0;\n\n    // 实现循环动画\n    this.animate();\n  }\n};","map":{"version":3,"names":["THREE","TextGeometry","FontLoader","name","data","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","renderer","WebGLRenderer","alpha","methods","createBox","fontcontent","gl","BoxGeometry","ml","LineBasicMaterial","transparent","opacity","color","cube","Mesh","edges","EdgesGeometry","ll","linewidth","ls","LineSegments","cube_p","Object3D","add","loader","load","font","tx","size","height","tm","MeshBasicMaterial","txm","position","set","x","rotation","createLine","points","push","Vector3","BufferGeometry","setFromPoints","line","Line","creatFont","animate","requestAnimationFrame","isl","render","props","mounted","setSize","lookAt","$refs","threecontent","appendChild","domElement","fontconstent","y"],"sources":["src/components/3d/Tr2.vue"],"sourcesContent":["<template>\r\n    <div ref=\"threecontent\">\r\n    </div>\r\n</template>\r\n<script>\r\nimport * as THREE from 'three'\r\nimport { TextGeometry } from 'three/addons/geometries/TextGeometry.js';\r\nimport { FontLoader } from 'three/addons/loaders/FontLoader.js';\r\n/// <reference path=\"node_modules/@types/three/src/Three.d.ts\" />\r\n/// <reference path=\"node_modules/@types/three/src/constants.d.ts\" />\r\n/// <reference path=\"node_modules/@types/three/src/Three.Legacy.d.ts\" />\r\n/// <reference path=\"node_modules/@types/three/src/utils.d.ts\" />\r\nexport default {\r\n    name:\"Tr2\",\r\n    data(){\r\n        return {\r\n            scene:new THREE.Scene(), //创建场景\r\n            camera:new THREE.PerspectiveCamera(75,window.innerWidth / window.innerHeight,0.1,1000), //创建相机\r\n            renderer:new THREE.WebGLRenderer({alpha:true}), //创建渲染器\r\n        }\r\n    },\r\n    methods: {\r\n        createBox(fontcontent){\r\n            const gl = new THREE.BoxGeometry(1.3, 0.1, 0.8 ); // 定义几何体类型\r\n\r\n            const ml = new THREE.LineBasicMaterial({\r\n                transparent:true,\r\n                opacity:0.8,\r\n                color:\"#2C425E\"\r\n\r\n            }); //定义线条材质\r\n\r\n            // 给出立方体\r\n            const cube = new THREE.Mesh(gl,ml);\r\n\r\n            // 添加边框\r\n            const edges = new THREE.EdgesGeometry(gl);\r\n            const ll = new THREE.LineBasicMaterial({ color: '#36ABA7', linewidth: 10 });  // black color for the edges\r\n            const ls = new THREE.LineSegments(edges, ll);\r\n\r\n                        \r\n            this.cube_p = new THREE.Object3D();\r\n            this.cube_p.add(cube);\r\n            this.cube_p.add(ls);\r\n\r\n            // 添加字体\r\n            const loader = new FontLoader();\r\n            loader.load( 'http://127.0.0.1:8000/media/fonts/helvetiker_bold.typeface.json', (font)=>{\r\n                const tx = new TextGeometry( `${fontcontent}`, {\r\n                        font: font,\r\n                        size: 0.2,\r\n                        height: 0.03\r\n                    } );\r\n                    let tm = new THREE.MeshBasicMaterial({ color: \"#C0C1C3\" });\r\n                    const txm = new THREE.Mesh(tx,tm);\r\n                    txm.position.set(this.x,0.15,0.08);\r\n                    txm.rotation.x=80;\r\n                    this.cube_p.add(txm);\r\n                } );\r\n            \r\n            this.scene.add(this.cube_p)\r\n\r\n        },\r\n        createLine(){\r\n            const points = [];\r\n            points.push(new THREE.Vector3(0,0,0));\r\n            points.push(new THREE.Vector3(0,2,0));\r\n            points.push(new THREE.Vector3(1,2,0));\r\n            const gl = new THREE.BufferGeometry().setFromPoints(points); // 定义几何体类型\r\n            const ml = new THREE.LineBasicMaterial({color:0x0000ff}); //定义线条材质\r\n\r\n            // 给出线条\r\n            this.line = new THREE.Line(gl,ml);\r\n            this.scene.add(this.line);\r\n        },\r\n        \r\n        creatFont(){\r\n\r\n        },\r\n\r\n\r\n        animate(){\r\n            requestAnimationFrame(this.animate);\r\n            // this.controls.update(); // 启动阻尼时\r\n            // 设置动画\r\n            if(this.cube_p.rotation.x <= 0.2 && this.isl == 1){\r\n                this.cube_p.rotation.x += 0.001;\r\n            }else if(this.isl != 2){\r\n                this.isl = 2;\r\n            }\r\n\r\n            if(this.cube_p.rotation.x > -0.2 && this.isl == 2){\r\n                this.cube_p.rotation.x -= 0.001;\r\n            }else if(this.isl != 1){\r\n                this.isl = 1;\r\n            }\r\n\r\n            // 渲染器对场景和摄像头进行渲染\r\n            this.renderer.render(this.scene,this.camera);\r\n        },\r\n    },\r\n    props:[\"fontconstent\",\"x\"],\r\n    mounted() {\r\n\r\n        \r\n        // this.renderer.setSize(window.innerWidth,window.innerHeight);\r\n        this.renderer.setSize(400,200)\r\n\r\n        this.camera.position.set(0,1,0);\r\n        this.camera.lookAt(0,0,0);\r\n\r\n        this.$refs.threecontent.appendChild(this.renderer.domElement);\r\n\r\n        this.createBox(this.fontconstent);\r\n\r\n        this.isl = 1\r\n        this.cube_p.rotation.x = 0;\r\n        this.cube_p.rotation.y = 0;\r\n\r\n        // 实现循环动画\r\n        this.animate();\r\n    },\r\n}\r\n</script>\r\n<style lang=\"css\">\r\n    \r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}