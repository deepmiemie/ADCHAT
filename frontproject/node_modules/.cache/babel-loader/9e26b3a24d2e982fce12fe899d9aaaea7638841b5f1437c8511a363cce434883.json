{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/addons/controls/OrbitControls.js';\n\n/// <reference path=\"node_modules/@types/three/src/Three.d.ts\" />\n/// <reference path=\"node_modules/@types/three/src/constants.d.ts\" />\n/// <reference path=\"node_modules/@types/three/src/Three.Legacy.d.ts\" />\n/// <reference path=\"node_modules/@types/three/src/utils.d.ts\" />\nexport default {\n  name: \"Tr1\",\n  data() {\n    return {\n      scene: new THREE.Scene(),\n      //创建场景\n      camera: new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000),\n      //创建相机\n      renderer: new THREE.WebGLRenderer() //创建渲染器\n    };\n  },\n\n  methods: {\n    createBox() {\n      const gl = new THREE.BoxGeometry(1, 1, 1); // 定义几何体类型\n      const ml = new THREE.LineBasicMaterial({\n        color: 0x0000ff\n      }); //定义线条材质\n\n      // 给出立方体\n      this.cube = new THREE.Mesh(gl, ml);\n      this.scene.add(this.cube);\n      this.camera.position.z = 5;\n    },\n    createLine() {\n      const points = [];\n      points.push(new THREE.Vector3(0, 0, 0));\n      points.push(new THREE.Vector3(0, 2, 0));\n      points.push(new THREE.Vector3(1, 2, 0));\n      const gl = new THREE.BufferGeometry().setFromPoints(points); // 定义几何体类型\n      const ml = new THREE.LineBasicMaterial({\n        color: 0x0000ff\n      }); //定义线条材质\n\n      // 给出线条\n      this.line = new THREE.Line(gl, ml);\n      this.scene.add(this.line);\n    },\n    createStar() {\n      const stargeo = new THREE.BufferGeometry(); //定义几何体类型为点状\n      const starmat = new THREE.PointsMaterial({\n        color: 0xFFFF,\n        size: 0.05,\n        transparent: true,\n        opacity: 0.7,\n        blending: THREE.AdditiveBlending\n      }); //定义星星类型\n\n      // 定义星星位置\n      const vertices = [];\n      for (let i = 0; i < 5000; i++) {\n        const x = (Math.random() - 0.5) * 15;\n        const y = (Math.random() - 0.5) * 15;\n        const z = (Math.random() - 0.5) * 15;\n        vertices.push(x, y, z);\n      }\n      stargeo.setAttribute('position', new THREE.Float32BufferAttribute(vertices, 3));\n      this.star = new THREE.Points(stargeo, starmat);\n      this.scene.add(this.star);\n    },\n    createControl() {\n      this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n      this.controls.enableDamping = true; // 启用阻尼 (动画效果)\n      this.controls.dampingFactor = 0.25;\n      this.controls.enableZoom = true; // 允许缩放\n      this.controls.zoomSpeed = 1.0;\n      this.controls.enableRotate = true; // 允许旋转\n      this.controls.rotateSpeed = 0.7;\n    },\n    animate() {\n      requestAnimationFrame(this.animate);\n      // 设置几何体动画\n      this.star.rotation.x += 0.0003;\n      this.star.rotation.y += 0.0003;\n      this.star.rotation.z += 0.0003;\n      this.controls.update(); // 启动阻尼时\n\n      // 渲染器对场景和摄像头进行渲染\n      this.renderer.render(this.scene, this.camera);\n    }\n  },\n  mounted() {\n    // this.renderer.setSize(window.innerWidth,window.innerHeight);\n    this.renderer.setSize(2000, 1000);\n    this.$refs.threecontent.appendChild(this.renderer.domElement);\n    this.createControl();\n    this.createStar();\n    // 实现循环动画\n    this.animate();\n  }\n};","map":{"version":3,"names":["THREE","OrbitControls","name","data","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","renderer","WebGLRenderer","methods","createBox","gl","BoxGeometry","ml","LineBasicMaterial","color","cube","Mesh","add","position","z","createLine","points","push","Vector3","BufferGeometry","setFromPoints","line","Line","createStar","stargeo","starmat","PointsMaterial","size","transparent","opacity","blending","AdditiveBlending","vertices","i","x","Math","random","y","setAttribute","Float32BufferAttribute","star","Points","createControl","controls","domElement","enableDamping","dampingFactor","enableZoom","zoomSpeed","enableRotate","rotateSpeed","animate","requestAnimationFrame","rotation","update","render","mounted","setSize","$refs","threecontent","appendChild"],"sources":["src/components/3d/Tr1.vue"],"sourcesContent":["<template>\r\n    <div ref=\"threecontent\">\r\n    </div>\r\n</template>\r\n<script>\r\nimport * as THREE from 'three'\r\nimport { OrbitControls } from 'three/addons/controls/OrbitControls.js';\r\n\r\n/// <reference path=\"node_modules/@types/three/src/Three.d.ts\" />\r\n/// <reference path=\"node_modules/@types/three/src/constants.d.ts\" />\r\n/// <reference path=\"node_modules/@types/three/src/Three.Legacy.d.ts\" />\r\n/// <reference path=\"node_modules/@types/three/src/utils.d.ts\" />\r\nexport default {\r\n    name:\"Tr1\",\r\n    data(){\r\n        return {\r\n            scene:new THREE.Scene(), //创建场景\r\n            camera:new THREE.PerspectiveCamera(75,window.innerWidth / window.innerHeight,0.1,1000), //创建相机\r\n            renderer:new THREE.WebGLRenderer(), //创建渲染器\r\n        }\r\n    },\r\n    methods: {\r\n        createBox(){\r\n            const gl = new THREE.BoxGeometry( 1, 1, 1 ); // 定义几何体类型\r\n            const ml = new THREE.LineBasicMaterial({color:0x0000ff}); //定义线条材质\r\n\r\n            // 给出立方体\r\n            this.cube = new THREE.Mesh(gl,ml);\r\n            this.scene.add(this.cube);\r\n            this.camera.position.z = 5;\r\n        },\r\n        createLine(){\r\n            const points = [];\r\n            points.push(new THREE.Vector3(0,0,0));\r\n            points.push(new THREE.Vector3(0,2,0));\r\n            points.push(new THREE.Vector3(1,2,0));\r\n            const gl = new THREE.BufferGeometry().setFromPoints(points); // 定义几何体类型\r\n            const ml = new THREE.LineBasicMaterial({color:0x0000ff}); //定义线条材质\r\n\r\n            // 给出线条\r\n            this.line = new THREE.Line(gl,ml);\r\n            this.scene.add(this.line);\r\n        },\r\n        \r\n        createStar(){\r\n            const stargeo = new THREE.BufferGeometry() //定义几何体类型为点状\r\n            const starmat = new THREE.PointsMaterial({\r\n                color:0xFFFF,\r\n                size:0.05,\r\n                transparent:true,\r\n                opacity:0.7,\r\n                blending:THREE.AdditiveBlending\r\n            }) //定义星星类型\r\n\r\n            // 定义星星位置\r\n            const vertices = [];\r\n            for (let i = 0; i < 5000; i++) {\r\n                const x = (Math.random() - 0.5) * 15;\r\n                const y = (Math.random() - 0.5) * 15;\r\n                const z = (Math.random() - 0.5) * 15;\r\n                vertices.push(x, y, z);\r\n            }\r\n            stargeo.setAttribute('position',new THREE.Float32BufferAttribute(vertices,3));\r\n\r\n            this.star = new THREE.Points(stargeo,starmat);\r\n            this.scene.add(this.star);\r\n            \r\n        },\r\n\r\n        createControl(){\r\n            this.controls = new OrbitControls(this.camera,this.renderer.domElement);\r\n\r\n            this.controls.enableDamping = true; // 启用阻尼 (动画效果)\r\n            this.controls.dampingFactor = 0.25;\r\n            this.controls.enableZoom = true;   // 允许缩放\r\n            this.controls.zoomSpeed = 1.0;\r\n            this.controls.enableRotate = true; // 允许旋转\r\n            this.controls.rotateSpeed = 0.7;\r\n        },\r\n        animate(){\r\n            requestAnimationFrame(this.animate);\r\n            // 设置几何体动画\r\n            this.star.rotation.x += 0.0003;\r\n            this.star.rotation.y += 0.0003;\r\n            this.star.rotation.z += 0.0003;\r\n\r\n            this.controls.update(); // 启动阻尼时\r\n\r\n            // 渲染器对场景和摄像头进行渲染\r\n            this.renderer.render(this.scene,this.camera);\r\n        },\r\n    },\r\n    mounted() {\r\n        // this.renderer.setSize(window.innerWidth,window.innerHeight);\r\n        this.renderer.setSize(2000,1000)\r\n        this.$refs.threecontent.appendChild(this.renderer.domElement);\r\n        \r\n        this.createControl();\r\n        this.createStar();\r\n        // 实现循环动画\r\n        this.animate();\r\n    },\r\n}\r\n</script>\r\n<style lang=\"css\">\r\n    \r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}